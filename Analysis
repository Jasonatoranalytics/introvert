SELECT * FROM maven_advanced_sql.personality_dataset;


-- Distribution of Personality types
SELECT Personality, COUNT(*) AS Count
FROM maven_advanced_sql.personality_dataset
GROUP BY Personality;


-- Average Social Event Attendance by Personality
SELECT Personality, AVG(Social_event_attendance) AS Avg_Attendance
FROM maven_advanced_sql.personality_dataset
GROUP BY Personality;


-- Correlation Proxy: Do Extroverts Have Larger Friend Circles?
SELECT Personality, AVG(Friends_circle_size) AS Avg_Friends
FROM maven_advanced_sql.personality_dataset
GROUP BY Personality;

-- How often people post on social media based on stage fear
SELECT Stage_fear, AVG(Post_frequency) AS Avg_Posts
FROM maven_advanced_sql.personality_dataset
GROUP BY Stage_fear;

-- Compare those dained after socializing vs Not
SELECT Drained_after_socializing, AVG(Time_spent_Alone) AS Avg_Alone_Time
FROM maven_advanced_sql.personality_dataset
GROUP BY Drained_after_socializing;

-- Top 10 Most Social Individuals
SELECT *
FROM maven_advanced_sql.personality_dataset
ORDER BY Social_event_attendance DESC, Friends_circle_size DESC
LIMIT 10;


-- Missing Data Patterns
SELECT 
  SUM(CASE WHEN Time_spent_Alone IS NULL THEN 1 ELSE 0 END) AS Missing_Alone,
  SUM(CASE WHEN Stage_fear IS NULL THEN 1 ELSE 0 END) AS Missing_Stage_Fear
FROM maven_advanced_sql.personality_dataset;


-- More advanced CTE query


-- Create a CTE to calculate a composite social activity score
WITH social_scores AS (
    SELECT
        *,
        -- Create a weighted social activity score
        (COALESCE(Social_event_attendance, 0) * 0.4 +
         COALESCE(Going_outside, 0) * 0.3 +
         COALESCE(Friends_circle_size, 0) * 0.2 +
         COALESCE(Post_frequency, 0) * 0.1) AS Social_Activity_Score
    FROM maven_advanced_sql.personality_dataset
    WHERE Personality IN ('Introvert', 'Extrovert')
)

-- Rank each person within their personality type
SELECT
    Personality,
    Social_Activity_Score,
    Stage_fear,
    Drained_after_socializing,
    RANK() OVER (PARTITION BY Personality ORDER BY Social_Activity_Score DESC) AS Personality_Rank
FROM social_scores
ORDER BY Personality, Personality_Rank;



-- ----------------------------------
-- Example of Multiple CTES
-- ----------------------------------

-- First CTE: Calculate Social Activity Score
WITH social_scores AS (
    SELECT
        *,
        (COALESCE(Social_event_attendance, 0) * 0.4 +
         COALESCE(Going_outside, 0) * 0.3 +
         COALESCE(Friends_circle_size, 0) * 0.2 +
         COALESCE(Post_frequency, 0) * 0.1) AS Social_Activity_Score
    FROM maven_advanced_sql.personality_dataset
    WHERE Personality IN ('Introvert', 'Extrovert')
),

-- Second CTE: Calculate average score by personality to normalize against the group
avg_scores AS (
    SELECT
        Personality,
        AVG(Social_Activity_Score) AS Avg_Score
    FROM social_scores
    GROUP BY Personality
),

-- Third CTE: Join back to get deviation from the norm
deviation_scores AS (
    SELECT
        s.*,
        a.Avg_Score,
        (s.Social_Activity_Score - a.Avg_Score) AS Score_Deviation
    FROM social_scores s
    JOIN avg_scores a ON s.Personality = a.Personality
),

-- Fourth CTE: Rank top outliers in each personality group
ranked_outliers AS (
    SELECT *,
           RANK() OVER (PARTITION BY Personality ORDER BY ABS(Score_Deviation) DESC) AS Outlier_Rank
    FROM deviation_scores
)

-- Final output: Top 5 non-typical individuals in each group
SELECT *
FROM ranked_outliers
WHERE Outlier_Rank <= 5
ORDER BY Personality, Outlier_Rank;


-- ----------------------------------
-- Example of Recursive CTE
-- ----------------------------------


-- Need to add in a better personality data set that has an id

-- Recursive CTE: Calculate distance to a very social person (attendance >= 8)
WITH RECURSIVE influence_chain AS (
    -- Base case: people whose friends are already highly social
    SELECT
        f.person_id,
        f.friend_id,
        p1.Social_event_attendance AS person_attendance,
        p2.Social_event_attendance AS friend_attendance,
        1 AS steps
    FROM maven_advanced_sql.friendship_links f
    JOIN maven_advanced_sql.personality_dataset_imp p1 ON f.person_id = p1.Person_id
    JOIN maven_advanced_sql.personality_dataset_imp p2 ON f.friend_id = p2.Person_id
    WHERE p2.Social_event_attendance >= 8

    UNION ALL

    -- Recursive case: walk the chain further
    SELECT
        f.person_id,
        f.friend_id,
        ic.person_attendance,
        p2.Social_event_attendance AS friend_attendance,
        ic.steps + 1 AS steps
    FROM influence_chain ic
    JOIN maven_advanced_sql.friendship_links f ON ic.friend_id = f.person_id
    JOIN maven_advanced_sql.personality_dataset_imp p2 ON f.friend_id = p2.Person_id
    WHERE ic.steps < 10  -- safety stop to prevent infinite loops
)

-- Final result: minimum steps each person is from a highly social person
SELECT
    person_id,
    MIN(steps) AS steps_to_high_social
FROM influence_chain
GROUP BY person_id
ORDER BY steps_to_high_social;

-- ----------------------------------
-- Example of Window Function
-- ----------------------------------

-- Create a social score and rank individuals within personality groups
SELECT
    Person_id,
    Personality,
    Social_event_attendance,
    Going_outside,
    Friends_circle_size,
    Post_frequency,

    -- Calculate a weighted social score
    (COALESCE(Social_event_attendance, 0) * 0.4 +
     COALESCE(Going_outside, 0) * 0.3 +
     COALESCE(Friends_circle_size, 0) * 0.2 +
     COALESCE(Post_frequency, 0) * 0.1) AS social_score,

    -- Rank within personality type
    RANK() OVER (PARTITION BY Personality ORDER BY
        (COALESCE(Social_event_attendance, 0) * 0.4 +
         COALESCE(Going_outside, 0) * 0.3 +
         COALESCE(Friends_circle_size, 0) * 0.2 +
         COALESCE(Post_frequency, 0) * 0.1) DESC
    ) AS rank_within_personality,

    -- Average and max social score for the group
    AVG(
        (COALESCE(Social_event_attendance, 0) * 0.4 +
         COALESCE(Going_outside, 0) * 0.3 +
         COALESCE(Friends_circle_size, 0) * 0.2 +
         COALESCE(Post_frequency, 0) * 0.1)
    ) OVER (PARTITION BY Personality) AS avg_social_score,

    MAX(
        (COALESCE(Social_event_attendance, 0) * 0.4 +
         COALESCE(Going_outside, 0) * 0.3 +
         COALESCE(Friends_circle_size, 0) * 0.2 +
         COALESCE(Post_frequency, 0) * 0.1)
    ) OVER (PARTITION BY Personality) AS max_social_score

FROM maven_advanced_sql.personality_dataset_imp
WHERE Personality IN ('Introvert', 'Extrovert');





